<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[東大院生プログラマの日常]]></title>
  <link href="http://tarukosu.github.io/atom.xml" rel="self"/>
  <link href="http://tarukosu.github.io/"/>
  <updated>2014-03-08T22:56:41+09:00</updated>
  <id>http://tarukosu.github.io/</id>
  <author>
    <name><![CDATA[tarukosu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[極限法（ケアレスミスの防ぎ方）]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/08/limit/"/>
    <updated>2014-03-08T21:34:39+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/08/limit</id>
    <content type="html"><![CDATA[<p>今回は計算過程でのケアレスミスを防ぐテクニックその4 <strong>極限法</strong>です．</p>

<p>これは前回説明した代入法とよく似ています．<br />
代入法では文字にある値を代入して確かめましたが，極限法では文字の極限をとります．</p>

<!-- more -->

<p>例1  </p>

<script type="math/tex; mode=display">

x^2-3x-28=0\\
(x-7)(x+4)=0

</script>

<p>上側の式の左辺を$x\to \infty$とすると左辺 $\to \infty$<br />
下側の式の左辺も$x\to \infty$とすると左辺 $\to \infty$ となり，一致します．</p>

<p>例2<br />
1つのさいころを投げ続けて，同じ目が２回連続して出たら終了するものとする．<br />
r回目以内に終了する確率を求めよ．</p>

<p>求めた答え</p>

<script type="math/tex; mode=display">
1-(\freq{5}{6})^{r-1}
</script>

<p>$r\to \infty$とすると求めた答え$\to 1$となる．<br />
問題文で考えると，ずっと投げ続ければ($r\to \infty$)どこかで同じ目がでて終了するはずなので，確率は1に近づくはずである．
よって一致する．<br />
前回の代入法をつかって$r=0, r=1$を代入して確かめると更によい．</p>

<hr />
<p>この方法のメリットは代入法と同じで，<strong>計算が比較的簡単なこと</strong>，<strong>離れた数式でも比較できる</strong>です．</p>

<p>デメリットも同じで，<strong>間違いが見つかるかどうかわからない</strong>ところです．  </p>

<p>代入法と比べると，極限法は計算がより楽ですが，その分，間違えていても一致するという場合が多くなります．<br />
例1で考えると7,4が別の数字になっていても，極限の値は一致してしまいます．</p>

<p>そのため，これはあくまでも確認程度のもので，極限が一致した所で正しいという保証はないということを忘れないでください．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>極限法（文字の極限をとる）</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代入法（ケアレスミスの防ぎ方）]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/08/substitution/"/>
    <updated>2014-03-08T00:18:48+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/08/substitution</id>
    <content type="html"><![CDATA[<p>今回は計算過程でのケアレスミスを防ぐテクニックその3 <strong>代入法</strong>です．</p>

<p>これは，計算や式変形を行う前と行った後の文字に同じ値を代入し，その時に両方の式が一致するかを確かめる方法です．  </p>

<!-- more -->

<p>例１</p>

<script type="math/tex; mode=display">

x^2-3x-28=0\\
(x-7)(x+4)=0

</script>

<p>という因数分解の場合，$x=7$を代入すると，下の式の左辺は0になります（等式が成り立つ） ．<br />
これを上側の式に代入すると$7^2-3\times 7-28=0$となり，同じく0になっています（等式が成り立つ）．</p>

<p>例２</p>

<script type="math/tex; mode=display">
\sum_{k=1}^{n} k=\frac{n(n+1)}{2}
</script>

<p>$n=1$を代入すると，左辺は$\sum_{k=1}^{1}=1$，右辺は$\frac{1\times2}{2}=1$となり一致します．</p>

<hr />
<p>この方法のメリットは<strong>計算が比較的簡単なこと</strong>です．<br />
ただし，代入する値によって計算の難しさは変わってくるので，できるだけ計算しやすい値を代入するといいと思います．</p>

<p>もうひとつのメリットは<strong>離れた数式でも比較できる</strong>ことです．<br />
どういうことかというと，$A=B=C=D=E$と変形があった場合，これまでの反復法，逆戻り法では前後の数式同士の比較になっていたのですが，代入法の場合はAとEにそれぞれ代入することで離れた数式でも確認できます．</p>

<p>また，”問題と答え”でも確認が可能です．  </p>

<p>例えば問題文中で$a_1=1$とされている数式の一般解を求める問題で，</p>

<script type="math/tex; mode=display">
a_n = n^2 -2n + 3
</script>

<p>と求めたとすると，一般解に$n=1$を代入した時の値は$a_1=2$となるためこの答えは間違っているとわかります．</p>

<p>また，確率の問題でも，$n$を用いた答えの場合には$n=1$などの値を代入することで，確認するといいでしょう．</p>

<hr />

<p>この方法のデメリットは，間違いが見つかるかどうかわからないところです．  </p>

<p>代入した時に一致しなければ間違っていると言えるのですが，一致したからと言って間違えていないとは言えません．<br />
たまたま代入した値の場合は一致したけれども，他の値の場合には異なっている，ということがありえるからです．</p>

<p>ですが，複数の値を代入することで，”本当は間違っているのに見つけられない”という割合を減らすことができます．<br />
3種類の値を代入してあっていれば，正しい割合はかなり高くなると思います．</p>

<p>文字を含んだ答えの場合には，3種類の値を代入して確かめる，ということをやってみてください．</p>

<h3 id="section">今日のポイント</h3>

<p><strong>代入法（計算を行う前と行った後の文字に同じ値を代入し，一致するかを確かめる）</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆戻り法（ケアレミスの防ぎ方）]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/06/reverse/"/>
    <updated>2014-03-06T21:40:24+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/06/reverse</id>
    <content type="html"><![CDATA[<p>今回は計算過程でのケアレスミスを防ぐテクニックその2，<strong>逆戻り法</strong>です．</p>

<p>これは，計算や式変形を行った後の式から，計算前・変形前の式に戻すことが出来るか（戻して一致するか）を確かめるという方法です．<br />
この方法のメリット・デメリットを説明します．</p>

<!-- more -->

<hr />

<p>メリットは，この方法が使える式であれば<strong>ほぼ確実に間違いを見つけることができる</strong>ことです．<br />
反復法では2回とも同じ間違いをしてしまうことはしばしばありえますが，逆戻り法では行う計算が異なっているために同じ間違いは起こりにくくなります．    </p>

<p>もうひとつのメリットは，<strong>計算後から計算前への変形が簡単な場合に，確かめが簡単になる</strong>ことです．<br />
例えば，因数分解はこのような例です．</p>

<script type="math/tex; mode=display">
x^2-3x-28=0\\
(x-7)(x+4)=0
</script>

<p>という因数分解は，</p>

<script type="math/tex; mode=display">
(x-7)(x+4)=0\\
x^2-3x-28=0
</script>

<p>と展開することにより確かめられます．</p>

<p>また，簡単な引き算も意外と間違えてしまうことがありますが，</p>

<script type="math/tex; mode=display">
144 - 76 = 68
</script>

<p>と計算した後で，</p>

<script type="math/tex; mode=display">
76 + 68 = 144
</script>

<p>として確認することができます．</p>

<hr />

<p>デメリットは，積分計算や∑の計算などのもとに戻すことの方が難しい計算があるということです．このような場合には，別の方法を使ったほうがよいでしょう．</p>

<p>どのような場合に有効で，どのような場合に役に立たないのかは，いろいろな問題を解いていくなかで試して確かめてみてください．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>逆戻り法（計算後の式から，計算前の式に戻すことが出来るか確かめる）</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反復法（ケアレスミスの防ぎ方）]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/03/repeat/"/>
    <updated>2014-03-03T23:07:22+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/03/repeat</id>
    <content type="html"><![CDATA[<p>今回からは計算過程での，ケアレスミスを防ぐテクニックについて書いていきます．</p>

<p>1つ目の方法は<strong>反復法</strong>です．（名前は勝手につけたものなので，覚えるようなものではないです）</p>

<p>これは，1度行った計算をもう一度繰り返して一致するかどうか確かめるという方法です．  ポイントは1回目の計算をあまり見ないようにすることです．1回目の計算を見てしまうとその式に引きずられて同じように間違いやすくなるからです．</p>

<hr />

<p>この方法のメリット，デメリットを説明します．</p>

<!-- more -->

<p>メリットは，<strong>どういう場合にでも使えること</strong>です．どんな計算でもこの方法を使えます．</p>

<p>デメリットは<strong>時間がかかってしまうこと</strong>と，<strong>2回とも同じように間違ってしまう可能性があること</strong>です．<br />
同じように間違う，というのは計算ミスを2回ともしてしまうという場合に加えて，そもそも計算方法を間違えて覚えてしまっている（∑の展開，積分など）場合には間違いを見つけられません．</p>

<hr />

<p>デメリットはありますが，どんなときにも使える汎用的な方法なので，是非試してみてください．</p>

<h3 id="section">今日のポイント</h3>

<p><strong>反復法(1度行った計算をもう一度繰り返して一致するかどうか確かめる)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ケアレスミスの防ぎ方]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/02/careless-mis/"/>
    <updated>2014-03-02T22:25:51+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/02/careless-mis</id>
    <content type="html"><![CDATA[<p>少し前に数学は<strong>間違えないことが大事</strong>だと書きました．<br />
ここから数回にわたって，間違えないためにはどうすればいいのか，ということを書いていこうかと思います．</p>

<p>間違えるパターンは大きく分けて2種類あります．</p>

<ul>
  <li>論理の誤り</li>
  <li>ケアレスミス</li>
</ul>

<p>論理の誤りとは，簡単に言うと 「Aであるから，Bである」 と考えたけれどもそれが間違っている場合です．</p>

<p>ケアレスミスは，計算ミスや数字の書き間違いなどのミスのことです．</p>

<p>気をつけて，確実に減らすことができるのはケアレスミスの方です．そこでまずはケアレスミスの減らし方を見ていきます．</p>

<hr />

<!-- more -->

<p>ケアレスミスを減らすために有効なのは，何度も確かめることです．  </p>

<p>例えば，Aさんは計算が苦手で，計算問題を解いて正解できる確率が80%だとします．<br />
このときAさんがいつも通りに解くとすると，点数は80点となります．</p>

<p>ですが，Aさんが問題を解き終わった後に，再度始めから解いてみるとどうなるでしょうか？</p>

<p>Aさんが2回とも間違う確率は0.2×0.2 = 0.04 となり，たった4%となります．  2回の計算が一致しなかった（一回は間違えた）場合は，その2つの計算を見比べることで間違いに気付けるでしょう．<br />
少なくとも1回正解した問題は正解できるとすると，点数は96点です．</p>

<p>このように確かめる回数を増やせば，その分正解する確率をあげることができます．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>何度も確かめることでケアレスミスを減らす</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同値を意識する]]></title>
    <link href="http://tarukosu.github.io/blog/2014/03/02/hitsuyo-jubun3/"/>
    <updated>2014-03-02T00:16:40+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/03/02/hitsuyo-jubun3</id>
    <content type="html"><![CDATA[<p>前回<strong>解と問題は同値なもの</strong>と説明しました．</p>

<p>今回は問題を解いていく過程で同値を意識すれば，問題が解きやすくなることについて説明しようと思います．</p>

<!-- more -->

<p>問題となる条件をいくつかに分解できる場合があります．</p>

<p>例えば，</p>

<script type="math/tex; mode=display">
関数~~y=ax^2+bx+c\\
が~~(0,1), (1,6) ,(2,15)を通る場合，a,b,c の値を求めよ
</script>

<p>という問題の場合</p>

<script type="math/tex; mode=display">
ⅰ.~~ y=ax^2+bx+c\\
ⅱ.~~ x=0,~y=1\\
ⅲ.~~ x=1,~y=6\\
ⅳ.~~ x=2,~y=15
</script>

<p>という4つに分割できます．</p>

<p>この条件の一部を同値なものに変形した場合，元々の条件を考える代わりに変形後の条件を考えれば良くなります．言い換えれば，変形後の条件を考えれば元々の条件を考える必要がなくなる，ということです．</p>

<p>先ほどの例の場合には</p>

<script type="math/tex; mode=display">
ⅰ.~~ y=ax^2+bx+c\\
ⅱ.~~ x=0,~y=1\\
\iff\\
ⅰ'.~~ y=ax^2+bx+1\\
ⅱ'.c=1
</script>

<p>と変形できます．<br />
このとき，ⅰ,ⅱ,ⅲ,ⅳを考える代わりにⅰ’,ⅱ’,ⅲ,ⅳを考えればよいということです．</p>

<p>ⅰ’,ⅱ’,ⅲ,ⅳに対して，ⅱの条件を考えても意味はありません．ⅰ’に$x=0,~y=1$を代入しても$1=1$となり何も得られません．</p>

<hr />

<p>問題がなかなか解けないときには，すでに使われている条件をもう一度考えてしまうことがよくあります．<br />
ⅰ’に対してⅱを使おうとしてしまう場合です．</p>

<p>しかしこれは意味のないことで，まだ考慮していない条件を使わなければいけません．<br />
どの条件と同値なものを考えられているか，ということを意識することで，次はまだ考えていない条件を使って変形をすればよくなるということがわかります．<br />
そのため，意味のない考えを少なくすることができるので，問題が解きやすくなります．</p>

<h3 id="section">今日のポイント</h3>

<p><strong>条件の一部を同値なものに変形した場合，変形後の条件のみを考えれば良い</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[必要×十分=?]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/28/hitsuyo-jubun2/"/>
    <updated>2014-02-28T07:56:04+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/28/hitsuyo-jubun2</id>
    <content type="html"><![CDATA[<script type="math/tex; mode=display">
p \Rightarrow q \\
p \Leftarrow q
</script>

<p>が両方とも成り立つ時，
$$
p \iff q 
$$</p>

<p>と表わせ，<strong>pとqは同値である</strong>，または<strong>pはqであるための必要十分条件である</strong>と呼びます．</p>

<p>この<strong>同値</strong>というものがどうして重要かというと，数学の解（最終的な答え）というのは基本的には問題と同値なものであるからです．</p>

<hr />

<p>少し具体的に見ていきます．</p>

<p>簡単な例ですが，次のような問題文を考えます．
$$
x(x-1) = x ~~を満たすxを求めよ
$$</p>

<!-- more -->

<p>誤った答え1</p>

<script type="math/tex; mode=display">
x(x-1) = x \\
x-1 = 1 \\
x = 2
</script>

<p>2行目の$x-1=0$というのは1行目に対する十分条件ですが必要条件ではありません．</p>

<p>$$
x(x-1) = x \Leftarrow
x-1 = 1 
$$
は正しいが，</p>

<p>$$
x(x-1) = x \Rightarrow
x-1 = 1 
$$
は誤り．</p>

<p>このように，問題に対して十分条件（必要十分ではない）を考えてしまうと，求まった解は確かに問題の条件を満たすけれども他の解を見落としている，ということになります．</p>

<hr />

<p>誤った答え2</p>

<script type="math/tex; mode=display">
x(x-1) = x \\
左辺，右辺の正負が一致するには，\\
x-1 \ge 0 \\
x \ge 1

</script>

<p>この場合は，3行目の$x-1\ge 0$というのは1行目に対する必要条件ですが十分条件ではありません．</p>

<p>このように，問題に対して必要条件だけを考えてしまうと，求まった解には解が含まれているけれども絞りきれていない（解でないものも含まれている）ということになります．</p>

<hr />

<p>正しい解</p>

<script type="math/tex; mode=display">
x(x-1) = x \\
x(x-2) = 0 \\
x = 0, 2
</script>

<p>これでは，2行目，3行目ともに上の行と同値な数式です．<br />
そのため，問題と同値な解を得ることができます．</p>

<hr />

<p>今回は簡単な例だったので，正しい解のように解けることが当たり前の様に感じるかもしれません．ですが，問題が少し難しくなると，気づかぬうちに必要条件のみ，または十分条件のみ，となってしまうことがあります．<br />
$x$ が $\cos{x}$に置き換わっているだけでも，誤りは増えてしまうでしょう．</p>

<p>問題を解く際には，必要条件十分条件を意識して，<strong>同値</strong>なものを求められているかに注意してください．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>解と問題は同値なもの</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[必要条件と十分条件]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/27/hitsuyo-jubun/"/>
    <updated>2014-02-27T22:11:27+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/27/hitsuyo-jubun</id>
    <content type="html"><![CDATA[<p>必要条件，十分条件は聞いたことがあるでしょうか？</p>

<p>高校数学では比較的早く習う単元ですが，あまりよく理解できていない（できてなかった）人が多いような気がします．<br />
ですが，これはこの分野の問題に対してだけではなく，あらゆる数学の問題を解く上で大変重要な概念なのでしっかり理解してほしいです．</p>

<p>そのため，今日はこれらについて解説したいと思います．</p>

<!-- more -->

<p>定義は以下のようなものです．
$$
p \Rightarrow q ~~(~~ pならばq~~ ) であるとき，
$$</p>

<script type="math/tex; mode=display">
p~は~q~であるための十分条件
</script>

<script type="math/tex; mode=display">
q~は~p~であるための必要条件
</script>

<p>となります．<br />
pとかqだとよくわからないな…という人は
p に$x=1$, q に$x^2=1$を当てはめて考えてみてください．</p>

<p>ですが，これをただ暗記するだけでは理解したことにはなりませんし，よく間違えてしまいます．</p>

<hr />

<p>このような名前がつくのにはちゃんと理由があります．</p>

<p>まず，
「pはqであるための十分条件」について見ていきます．</p>

<p><strong>pはqであるための~条件</strong>というのは，いいかえれば<br />
<strong>qが成り立つためには，pという条件はどういう役割なのか</strong>ということです．</p>

<p>$$
p \Rightarrow q
$$
というのはpが成り立つときqは成り立つ，という意味です．<br />
つまりqが成り立つにはどういう条件が必要かな，と考えた時にpという条件が成り立てば十分（それさえあればqが成り立つと言えるということ）です．  </p>

<p>そのため，
$$
p~は~q~であるための十分条件
$$</p>

<p>と呼ぶのです．</p>

<hr />

<p>つぎに，
「qはpであるための必要条件」について見ていきます．</p>

<p>$$
p \Rightarrow q
$$
は対偶を取ると
$$
\overline{q} \Rightarrow \overline{p} ~~~(qでないならpでない)
$$
となります．</p>

<p>このときpが成り立つにはどういう条件が必要かな，と考えると，
「qでないならpでない」なので少なくともqである必要があります．  ただし「qが成り立つと必ずpが成り立つか」と言われるとそうではありません．</p>

<p>つまり，pが成り立つにはqという条件は必要だけれども，それだけでいいというわけではないということです．</p>

<p>そのため，
$$
q~は~p~であるための必要条件
$$
となります．</p>

<hr />

<p>理解できましたでしょうか？<br />
よくわからなかった場合には，
p に$x=1$, q に$x^2=1$を当てはめて読んでみて，なれてきたらp,qで考えてみてください．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>pはqであるための~条件</strong>というのは<br />
<strong>qが成り立つためには，pという条件はどういう役割なのか</strong>ということ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[おすすめ勉強法（教科書の読み方）]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/26/read-book/"/>
    <updated>2014-02-26T22:33:15+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/26/read-book</id>
    <content type="html"><![CDATA[<p>本日はおすすめの勉強法（教科書の読み方）について書いていきます．</p>

<p>予習・復習どちらの勉強に対しても，教科書を読むという事はとても重要です．<br />
特に数学ではわからないことがある場合には是非教科書を読んでください．  </p>

<p>しかし，自分で読もうとしてもすぐにわからなくなってしまい，諦めてしまったという経験をした方も多いことでしょう．</p>

<p>そこで，おすすめの読み方を伝えようと思います．</p>

<!-- more -->

<p>まずは，どこでもいいので自分の勉強したい単元の章を決め，その章の始めから読み始めてください．  </p>

<p>始めは簡単なところから始まるのですらすらと読めるのではないかと思います．<br />
ですが途中からすこしずつ怪しくなってきて，わからなくなって来てしまうのではないでしょうか？</p>

<p>わからない，と感じたら，「完璧に理解できる」と思える場所まで戻ってください．<br />
もし自信がなければ，章の始めからに戻ってください．</p>

<p>もう一度読み始めると最初に読んだよりは理解が深まっているはずです．<br />
そうすると，先程は「わからない」と思った点のうちいくつかはわかるようになっているのではないですか？</p>

<p>そしてまたわからないと感じたら「完璧に理解できる」場所まで戻って読み始めてください．<br />
このサイクルを何回も繰り返していくことで，確実に理解は深まっていき読めるページは増えていきます．</p>

<p>このサイクルは1日で何回も繰り返してもいいですし，毎日1ループずつ行なっても構いません．  ただし前回の内容を忘れてしまうほどは間隔を開けないでください．</p>

<p>数学には新しい概念（ベクトル，行列など）がたくさん登場します．<br />
ですが，聞きなれない概念というのは理解することは難しいものです．<br />
しかし，先程のサイクルによって，何度も概念の定義であったり仕組みであったりを読むことで，少しずつ聞きなれてきて違和感なく理解できるようになるのです．</p>

<h3 id="section">今日のポイント</h3>

<p><strong>わからなくなったら「完璧に理解できる」場所まで戻る</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[証明の正しい書き方]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/25/proof2/"/>
    <updated>2014-02-25T22:11:34+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/25/proof2</id>
    <content type="html"><![CDATA[<p>本日は正しい証明を書くためのポイントを具体的に説明しようと思います．</p>

<p>そのポイントとは，一言で言うと<br />
<strong>計算をとばして論理をとばすな</strong><br />
ということです．</p>

<!-- more -->

<p>前半の「計算を飛ばす」という部分ですが，答案を計算用紙がわりに使ってしまっている人が多いと思います．</p>

<p>しかし，答案には当たり前の計算は書く必要はありません．計算は別のところでして，ある程度省略して書くことが望ましいです．</p>

<p>ただし全部省略していいという訳ではありません．式変形において，当たり前ではない部分，というのは残す必要があります．</p>

<p>下の例を見てください．</p>

<script type="math/tex; mode=display"> 
\sum_{k=1}^n{\{(k+1)^2 + k\}}\\
=\sum_{k=1}^n{\{k^2+2k+1 + k\}}\\
=\sum_{k=1}^n{\{k^2+3k+1 \}}\\
=\frac{1}{6}n(n+1)(2n+1) + \frac{3}{2}n(n+1) + n\\
=\frac{1}{6}(2n^3+3n^2+n) + \frac{3}{2}(n^2+n) + n\\
=\frac{1}{3}n^3+2n^2+\frac{8}{3}n

</script>

<p>この数式で解答に書くべきなのはどの行でしょうか？<br />
1行目から3行目への変形は展開しただけなので，当たり前の変形です．そのため2行目は省略しても問題ありません．4行目から6行目も同様です．</p>

<p>それに対し，3行目から4行目へは$\Sigma$が展開されて式が大きく変わっています．そのため，この部分は省略せずに解答に書いておくべきです．</p>

<hr />

<p>続いて後半部分「論理を飛ばすな」の部分です．  </p>

<p>よくやってしまいがちなのが，いきなり数式を書き始めてしまうことです．<br />
そうではなくて，数式を書く前にどうしてその数式がなりたつのか，どうしてそう言えるのか，という理由を書かないといけません．  </p>

<p>また，これをきっちり書くことで数式が本当に成り立つのか自分でも確認することができ，間違い防止につながります．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>計算をとばして論理をとばすな</strong>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[証明ってなんだ？]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/24/proof/"/>
    <updated>2014-02-24T21:27:50+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/24/proof</id>
    <content type="html"><![CDATA[<p>「解答とは何を書くべきか？」のページで，
解答には証明を書くべきだ，と言いました．</p>

<p>じゃあ証明ってのはどう書けばいいのか？</p>

<p>というのが今日の話題です．</p>

<!-- more -->

<p>証明において必要なことは，
「それぞれの文章，数式が正しいことが明らかである」
ということです．<br />
大切なのは<strong>明らかである</strong>という部分で，単に正しいというわけではいけません．</p>

<p>少し例をあげて考えてみます．</p>

<hr />

<p>問題
$$
次の式を満たすxを求めよ． \<br />
x^2 + 3x + 2 = 0
$$</p>

<hr />
<p>良い証明</p>

<script type="math/tex; mode=display">
x^2 + 3x + 2 = 0\\
(x + 2)(x + 1) = 0\\
x = -1,-2
</script>

<hr />
<p>良くない証明</p>

<script type="math/tex; mode=display">
x^2 + 3x + 2 = 0\\
x = -1,-2
</script>

<hr />

<p>良い証明，悪い証明，両方とも解は同じです．</p>

<p>ですが良くない証明の方では，$x = -1,-2$となることが明らかではありません．<br />
良い証明の方では，$(x+2)(x+1)=0$があることにより，$x+2=0$または$x+1=0$がいえるので，$x = -1,-2$となることが明らかです．</p>

<p>これはとても簡単な例ですが，どんなに複雑な問題でも正しいことが明らかであるような式や言葉を並べていくことで正しい証明というものが出来るのです．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>証明とは正しいことが明らかである式や言葉の積み重ね</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解答とは何を書くべきか？]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/23/solution/"/>
    <updated>2014-02-23T23:06:38+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/23/solution</id>
    <content type="html"><![CDATA[<p>今日も数学（高校数学）の話です．</p>

<p>いきなり質問ですが，みなさん答案用紙には何を書いていますか？<br />
何を書くべきだと思いますか？</p>

<p>一番多い答えが「途中結果」ではないでしょうか？</p>

<p>しかしそれは間違っていると私は思います．</p>

<!-- more -->

<p>答案用紙には自分の書いた解が正しいことを示す<strong>証明</strong>を書くべきです．</p>

<p>証明といっても難しく考える必要はありません．<br />
一行ずつ正しいことを書いていけばそれが証明になります．<br />
証明の書き方について，詳しくは次回以降で説明しようと思います．</p>

<hr />

<p>どうして<strong>証明</strong>を書く必要があるのでしょうか？  </p>

<p>数学は論理的な学問です．<br />
解だけが重要なのではありません．<br />
解が正しいということが示されて始めて，その解には意味があるのです．</p>

<p>「途中経過を書く」ということが間違っている理由はこのためです．<br />
どれだけ途中経過を書いても，それが数学的に正しくなければそれは意味のないものになってしまいます．<br />
解が正しいということを示してなければ，解があっていても意味がないものとなります．</p>

<p>逆に言うと，きちんとした証明が書かれていれば，その解にはケチのつけようがありません．<br />
どんなに問題作成者の意図と違っていても，それは間違いなく正しい解になるのです．</p>

<h3 id="section">今日のポイント</h3>
<p><strong>解答には証明を書く</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[間違えないためには]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/22/mistake/"/>
    <updated>2014-02-22T23:08:01+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/22/mistake</id>
    <content type="html"><![CDATA[<p>数学の問題は間違えなければ正解できると言いました．  </p>

<p>では間違えないためにはどうすればいいのでしょうか？<br />
数十行にわたる解答を間違えずに書くことはとても難しく思えます．</p>

<p><strong>上から順番に，一行ずつしっかりと確認</strong>していけばそれほど難しいことではないのです．</p>

<p>例として，有名な証明「1+1=1」について見ていきます．
<!-- more -->
(もちろん間違った証明です．)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">A=1 とする
</span><span class="line">両辺にAをかけて   A × A = A
</span><span class="line">両辺から１を引いて A × A - 1 = A - 1
</span><span class="line">因数分解して     (A + 1)(A - 1) = A - 1
</span><span class="line">両辺をA-1で割って A + 1 = 1
</span><span class="line">A=1を代入して    1 + 1 = 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>証明できてしまいました．<br />
どこが間違っていたかわかりましたか？</p>

<p>「全体的に間違っている」，「なんとなくおかしい」などと感じてしまってはいけません．<br />
数学では，”少し間違っている”ということはありえないからです．必ずどこかまでは正しくて，どこかから間違っているのです．</p>

<p>1行目は定義なので問題ないです．<br />
2行目は等式の両辺に同じものをかけても等式は成り立つので正しいです．<br />
3行目，これも等式の両辺から同じものを引いているので成り立ちます．<br />
4行目は因数分解です．これも正しいです．<br />
5行目は等式の両辺から同じもので割っているので正しい，といってしまいそうになりますがよく考えてください．割り算には0で割ってはいけないという条件があります．
実はA-1=0なので，ここで0で割ってしまっていた，というわけです．</p>

<p>つまり5行目が誤り（0で両辺を割っているから）となります．</p>

<hr />

<p>今の例は比較的易しかったですが，どんなに難しい問題でも考え方は同じです．</p>

<p>解答を1行ずつしっかりと確認していき，誤りのない行を積み重ねていくことで，間違えない解答を作ることができるのです．</p>

<hr />

<h3 id="section">今日のポイント</h3>
<p><strong>上から順番に，一行ずつしっかりと確認</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数学は簡単]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/21/math/"/>
    <updated>2014-02-21T23:07:32+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/21/math</id>
    <content type="html"><![CDATA[<p>今日は数学について話そうと思います．<br />
ここで言う数学は高校数学の事だと思ってください．</p>

<p>私は高校時代， 数学にはかなり自信がありました． 数学オリンピックでもかなりいいところまで行きました． （入試本番はあまりうまくいかなかったのですが…）<br />
そこで数学の問題はどのように考えて解けばいいのか， どのように勉強すればいいのか，  など自分の経験をこのブログで伝えていきたいと思います． </p>

<!-- more -->

<hr />

<p>数学の問題は<strong>簡単</strong>です． <br />
なぜなら数学は正解と間違いの線引きがはっきりしているからです． 論理的に誤っていれば間違い， あっていれば正解． 個人の主観は入り込みません． </p>

<p>そのため， 数学において正解を見つけるために重要なポイントはたった１つ.<br />
<strong>間違えないこと</strong> です． <br />
間違えない = 正解 なのです． </p>

<p>一方， 国語や英語， 社会などでは「間違っているとまでは言えないけれど正解（満点）ではない」という答えが出てきます． <br />
つまり正解と間違いの線引きは曖昧です． このような状態で完璧な正解を探すことはとても難しいものです． </p>

<p>納得していただけたでしょうか？<br />
「そんなこと言われても間違ってしまうんだからしょうがない」<br />
「間違えないなんて難しい」<br />
と思われた方も多いかもしれません． </p>

<p>もちろん「これで説明終わり」というわけではなく， ちゃんと間違えないためのテクニックや考え方があります． </p>

<p>次回以降， 間違えないためにはどうすればいいのかということを説明していこうと思います． これを読み進めていけば数学は簡単ということを納得してもらえるのではないかと思います.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Commit]]></title>
    <link href="http://tarukosu.github.io/blog/2014/02/20/first-commit/"/>
    <updated>2014-02-20T19:50:14+09:00</updated>
    <id>http://tarukosu.github.io/blog/2014/02/20/first-commit</id>
    <content type="html"><![CDATA[<p>なんだか最近気が緩んでいるなぁと感じていたので，
ブログを始めてみます．</p>

<p>毎日更新することを目標にして，プログラミングのこと，勉強のこと，思ったことなど自由に書きつづって行こうと思います．</p>

<p>初回のブログはこのブログの作りかたについてです．</p>

<p>gitで管理できて手元のエディタで編集できることから，
Github と Octpress を使うことにしました．</p>

<!-- more -->

<p>導入には<a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a>を参考にさせていただきました．</p>

<hr />

<p>まずはGithub Pagesを作成しましょう．
githubで
<strong>your_name.github.io</strong>
という名前のレポジトリを作成します．<br />
私の場合は<strong>tarukosu.github.io</strong>となります．</p>

<hr />

<p>つぎにoctopressをインストールします．</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line">cd octopress
</span><span class="line">
</span><span class="line">gem install bundler
</span><span class="line">bundle install
</span><span class="line">
</span><span class="line">rake install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>rakeというのはmakeのruby版？らしいです．</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>として先程作成したGithub PagesレポジトリのURLを指定し，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake generate
</span><span class="line">rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>とすると，http://user_name.github.io で作成したブログが見れるようになります．<br />
始めは見れるようになるまで少し時間がかかります．</p>

<p>タイトルなどの設定は<strong>_config.yml</strong>で行えます．</p>

<hr />

<p>記事を作成するときは以下のようにします．</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post["title"]
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>すると<strong>/source</strong> 内に新しいファイルができるので，これを編集します．</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake gen_deploy</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>とすると，commit が行われてWebページが更新されます．</p>

<hr />
<p>編集中の記事をプレビューするには</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake preview</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>とすると http://localhost:4000 でみることができます．</p>

<hr />

<p>あまり1日目に頑張りすぎると続かないと思うので，今日はこのあたりで終わりにします．<br />
それではまた</p>
]]></content>
  </entry>
  
</feed>
